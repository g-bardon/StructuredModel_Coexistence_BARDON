alpha_permu <- alpha
c=1
for (i in 1:S){
for (j in 1:S){
if (i!=j){
beta_permu[i,j] <- liste_beta_permu[c]
alpha_permu[i,j] <- liste_alpha_permu[c]
c=c+1
}
}
}
x = c(x,algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha_permu,beta_permu))  ## indice i de x -> result de la dynamique d'un jeu de param avec permutation
}
write.csv(x, file="results_simul_permut.csv")
param <- read.csv("param_vital_rates.csv")
setwd("~/Stage_IMB/Scripts R/New_analysis_article/community_simulations/Opposite_Hierarchy_Only")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- read.csv("matrix_alpha.csv")
beta <- read.csv("matrix_beta.csv")
View(alpha)
alpha <- read.table("matrix_alpha.csv", sep=" ")
View(alpha)
beta <- read.table("matrix_beta.csv", sep=" ")
gen=3000
S=40
x <- c()
for (k in 1:20){
liste_beta_permu <- sample(beta[which(lower.tri(beta) | upper.tri(beta))], length(beta[which(lower.tri(beta) | upper.tri(beta))]))  ## Recup tous les coef beta qui ne sont pas sur la diag et permute
liste_alpha_permu <- sample(alpha[which(lower.tri(alpha) | upper.tri(alpha))], length(alpha[which(lower.tri(alpha) | upper.tri(alpha))]))## Recup tous les coef beta qui ne sont pas sur la diag et permute
beta_permu <- beta
alpha_permu <- alpha
c=1
for (i in 1:S){
for (j in 1:S){
if (i!=j){
beta_permu[i,j] <- liste_beta_permu[c]
alpha_permu[i,j] <- liste_alpha_permu[c]
c=c+1
}
}
}
x = c(x,algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha_permu,beta_permu))  ## indice i de x -> result de la dynamique d'un jeu de param avec permutation
}
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x <- c()
for (k in 1:20){
liste_beta_permu <- sample(beta[which(lower.tri(beta) | upper.tri(beta))], length(beta[which(lower.tri(beta) | upper.tri(beta))]))  ## Recup tous les coef beta qui ne sont pas sur la diag et permute
liste_alpha_permu <- sample(alpha[which(lower.tri(alpha) | upper.tri(alpha))], length(alpha[which(lower.tri(alpha) | upper.tri(alpha))]))## Recup tous les coef beta qui ne sont pas sur la diag et permute
beta_permu <- beta
alpha_permu <- alpha
c=1
for (i in 1:S){
for (j in 1:S){
if (i!=j){
beta_permu[i,j] <- liste_beta_permu[c]
alpha_permu[i,j] <- liste_alpha_permu[c]
c=c+1
}
}
}
x = c(x,algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha_permu,beta_permu))  ## indice i de x -> result de la dynamique d'un jeu de param avec permutation
}
write.csv(x, file="results_simul_permut.csv")
write.csv(x, file="results_simul_permut.csv", row.names = FALSE)
setwd("~/Stage_IMB/Scripts R/New_analysis_article/community_simulations/Opposite_Hierarchy_Only")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x_ref <- algo_simul(gen, S, ini, param[[1]],param[[2]],param[[3]],param[[4]],param[[5]],param[[6]])
color= rep("white", S)
color[x_ref] = "cyan"
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")
x <- as.vector(read.csv("results_simul_permut.csv"))
x <- as.vector(read.csv("results_simul_permut.csv"))
View(x)
x <- as.matrix(read.csv("results_simul_permut.csv"))
View(x)
x <- read.csv("results_simul_permut.csv")[,1]
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
source("simulation_algo.R")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
source("simulation_algo.R")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
traj_ref = algo_simul_traj(gen, S, ini, param[[1]],param[[2]],param[[3]],param[[4]],param[[5]],param[[6]])
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
source("simulation_algo.R")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
## Histogram of number of species at equilibrium in original case and permuted cases
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
##
test_inv_score = c()
for (i in 1:S){
for (j in 1:S){
if (i != j){
inv_sc = invasion_score(c(param[i,1],param[j,1], param[i,2],param[j,2],param[i,3],param[j,3],param[i,4],param[j,4],alpha[i,i],alpha[j,i],alpha[i,j],alpha[j,j],beta[i,i],beta[j,i],beta[i,j],beta[j,j]))
if (inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){ # 1 = coexistence classique
test_inv_score <- c(test_inv_score, 1)
}else if(inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]<1 & inv_sc[[4]]<1 | inv_sc[[1]]<1 & inv_sc[[2]]<1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){
test_inv_score <- c(test_inv_score, 2) # priority effect
}else if(inv_sc[[1]]>1 & inv_sc[[2]]<1 & inv_sc[[3]]<1 & inv_sc[[4]]>1 | inv_sc[[1]]<1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]<1){
test_inv_score <- c(test_inv_score, 3) # coexistence opposite hierarchy
}else{
test_inv_score <- c(test_inv_score, 4) ## other cases
}
}
}
}
test_inv_score <- as.factor(test_inv_score)
ggplot(data.frame(test_inv_score), aes(x=test_inv_score)) +
geom_bar()+
xlab("1=Coexistence, 2=Priority effect, 3=Opposite exclusion, 4=Other case")+
labs(title="Outcomes suggested by invasion criteria of pairs of species")
##
traj_ref = algo_simul_traj(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
source("simulation_algo.R")
invasion_score <- function(parameter){
pi01=parameter[1]
pi02=parameter[2]
gamma1=parameter[3]
gamma2=parameter[4]
phi1=parameter[5]
phi2=parameter[6]
s1a=parameter[7]
s2a=parameter[8]
alpha11=parameter[9]
alpha12=parameter[10]
alpha21=parameter[11]
alpha22=parameter[12]
beta11=parameter[13]
beta12=parameter[14]
beta21=parameter[15]
beta22=parameter[16]
scrit1j <- (1-s1a)/((1-gamma1)*(1-s1a)+pi01*gamma1)
scrit2j <- (1-s2a)/((1-gamma2)*(1-s2a)+pi02*gamma2)
f1<-(1/(gamma1*phi1))*(1-s1a)*(1-phi1+gamma1*phi1)
f2<-(1/(gamma2*phi2))*(1-s2a)*(1-phi2+gamma2*phi2)
Rs1<-phi1/scrit1j-1
Rs2<-phi2/scrit2j-1
Rf1<-(pi01/f1)-1
Rf2<-(pi02/f2)-1
Inv1<-(Rf1/Rf2)*(alpha22/alpha12)
Inv2<-(Rf2/Rf1)*(alpha11/alpha21)
Inv3<-(Rs1/Rs2)*(beta22/beta12)
Inv4<-(Rs2/Rs1)*(beta11/beta21)
return(list("Ralpha1"=Inv1,"Ralpha2"=Inv2,"Rbeta1"=Inv3,"Rbeta2"=Inv4))
}
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
## Histogram of number of species at equilibrium in original case and permuted cases
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
##
test_inv_score = c()
for (i in 1:S){
for (j in 1:S){
if (i != j){
inv_sc = invasion_score(c(param[i,1],param[j,1], param[i,2],param[j,2],param[i,3],param[j,3],param[i,4],param[j,4],alpha[i,i],alpha[j,i],alpha[i,j],alpha[j,j],beta[i,i],beta[j,i],beta[i,j],beta[j,j]))
if (inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){ # 1 = coexistence classique
test_inv_score <- c(test_inv_score, 1)
}else if(inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]<1 & inv_sc[[4]]<1 | inv_sc[[1]]<1 & inv_sc[[2]]<1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){
test_inv_score <- c(test_inv_score, 2) # priority effect
}else if(inv_sc[[1]]>1 & inv_sc[[2]]<1 & inv_sc[[3]]<1 & inv_sc[[4]]>1 | inv_sc[[1]]<1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]<1){
test_inv_score <- c(test_inv_score, 3) # coexistence opposite hierarchy
}else{
test_inv_score <- c(test_inv_score, 4) ## other cases
}
}
}
}
test_inv_score <- as.factor(test_inv_score)
ggplot(data.frame(test_inv_score), aes(x=test_inv_score)) +
geom_bar()+
xlab("1=Coexistence, 2=Priority effect, 3=Opposite exclusion, 4=Other case")+
labs(title="Outcomes suggested by invasion criteria of pairs of species")
##
traj_ref = algo_simul_traj(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
traj_ref = algo_simul_traj(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
source("simulation_algo.R")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
x <- c()
for (k in 1:200){
liste_beta_permu <- sample(beta[which(lower.tri(beta) | upper.tri(beta))], length(beta[which(lower.tri(beta) | upper.tri(beta))]))  ## Recup tous les coef beta qui ne sont pas sur la diag et permute
liste_alpha_permu <- sample(alpha[which(lower.tri(alpha) | upper.tri(alpha))], length(alpha[which(lower.tri(alpha) | upper.tri(alpha))]))## Recup tous les coef beta qui ne sont pas sur la diag et permute
beta_permu <- beta
alpha_permu <- alpha
c=1
for (i in 1:S){
for (j in 1:S){
if (i!=j){
beta_permu[i,j] <- liste_beta_permu[c]
alpha_permu[i,j] <- liste_alpha_permu[c]
c=c+1
}
}
}
x = c(x,algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha_permu,beta_permu))  ## indice i de x -> result de la dynamique d'un jeu de param avec permutation
}
write.csv(x, file="results_simul_permut.csv", row.names = FALSE)
source("simulation_algo.R")
invasion_score <- function(parameter){
pi01=parameter[1]
pi02=parameter[2]
gamma1=parameter[3]
gamma2=parameter[4]
phi1=parameter[5]
phi2=parameter[6]
s1a=parameter[7]
s2a=parameter[8]
alpha11=parameter[9]
alpha12=parameter[10]
alpha21=parameter[11]
alpha22=parameter[12]
beta11=parameter[13]
beta12=parameter[14]
beta21=parameter[15]
beta22=parameter[16]
scrit1j <- (1-s1a)/((1-gamma1)*(1-s1a)+pi01*gamma1)
scrit2j <- (1-s2a)/((1-gamma2)*(1-s2a)+pi02*gamma2)
f1<-(1/(gamma1*phi1))*(1-s1a)*(1-phi1+gamma1*phi1)
f2<-(1/(gamma2*phi2))*(1-s2a)*(1-phi2+gamma2*phi2)
Rs1<-phi1/scrit1j-1
Rs2<-phi2/scrit2j-1
Rf1<-(pi01/f1)-1
Rf2<-(pi02/f2)-1
Inv1<-(Rf1/Rf2)*(alpha22/alpha12)
Inv2<-(Rf2/Rf1)*(alpha11/alpha21)
Inv3<-(Rs1/Rs2)*(beta22/beta12)
Inv4<-(Rs2/Rs1)*(beta11/beta21)
return(list("Ralpha1"=Inv1,"Ralpha2"=Inv2,"Rbeta1"=Inv3,"Rbeta2"=Inv4))
}
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=40
## Histogram of number of species at equilibrium in original case and permuted cases
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
##
test_inv_score = c()
for (i in 1:S){
for (j in 1:S){
if (i != j){
inv_sc = invasion_score(c(param[i,1],param[j,1], param[i,2],param[j,2],param[i,3],param[j,3],param[i,4],param[j,4],alpha[i,i],alpha[j,i],alpha[i,j],alpha[j,j],beta[i,i],beta[j,i],beta[i,j],beta[j,j]))
if (inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){ # 1 = coexistence classique
test_inv_score <- c(test_inv_score, 1)
}else if(inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]<1 & inv_sc[[4]]<1 | inv_sc[[1]]<1 & inv_sc[[2]]<1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){
test_inv_score <- c(test_inv_score, 2) # priority effect
}else if(inv_sc[[1]]>1 & inv_sc[[2]]<1 & inv_sc[[3]]<1 & inv_sc[[4]]>1 | inv_sc[[1]]<1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]<1){
test_inv_score <- c(test_inv_score, 3) # coexistence opposite hierarchy
}else{
test_inv_score <- c(test_inv_score, 4) ## other cases
}
}
}
}
test_inv_score <- as.factor(test_inv_score)
ggplot(data.frame(test_inv_score), aes(x=test_inv_score)) +
geom_bar()+
xlab("1=Coexistence, 2=Priority effect, 3=Opposite exclusion, 4=Other case")+
labs(title="Outcomes suggested by invasion criteria of pairs of species")
##
traj_ref = algo_simul_traj(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
liste_beta <- beta[which(lower.tri(beta) | upper.tri(beta))]
liste_alpha <- alpha[which(lower.tri(alpha) | upper.tri(alpha))]
plot(liste_alpha, liste_beta)
plot(rank(liste_alpha), rank(liste_beta), xlab="Rank of alpha_ij", ylab="Rank of beta_ij")
simul_alpha_less <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],matrix(0, 40, 40),beta)
simul_beta_less <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,matrix(0, 40, 40))
getwd()
library("mvtnorm")
init <- function(S){
nj <- runif(S, min=10, max=50)
na <- runif(S, min=10, max=50)
return(cbind(nj,na))
}
parametrage <- function (S){
fert = rlnorm(S, meanlog = 3, sdlog=0.05)  ## loi log normale pour la fertilité, assez petite variance sinon très grosse fertilité possibles
mat_rate = rbeta(S, 50,50) ## Loi beta, distribution piquée centrée en 8/13
juv_surv = rbeta(S, 50,50) ## Loi beta, distribution piquée centrée en 8/13
adult_surv = rbeta(S, 50,50) ## Loi beta, distribution piquée centrée en 8/13
alpha_intra = rnorm(S, 0.05, 0.01)  # Tirage des coef de competition intra selon loi normale
beta_intra = rnorm(S, 0.05, 0.01)
sig=0.02
alpha_beta_inter = rmvnorm(n=S*(S-1), mean=c(0.04,0.04), sigma=matrix(c(sig^2, -(sig^2)*0.9, -(sig^2)*0.9, sig^2), 2,2, byrow = TRUE))
alpha=matrix(0,S,S)   ## Matrice de tous les coef de competition alpha : colonne i correspond à la competition exercée sur l'espèce i
beta=matrix(0,S,S)  ## Matrice de tous les coef de competition beta : colonne i correspond à la competition exercée sur l'espèce i
c=1
for (i in 1:S){
for (j in 1:S){
if (i==j){
alpha[i,j] <- alpha_intra[i]  ## Coef de compet intra sur la diag
beta[i,j] <- beta_intra[i]
}else{
x <- alpha_beta_inter[c,]
alpha[i,j] <- x[1] ## Coef de compet inter dans le reste de la matrice, tiré dans le pool de coef alpha_beta_inter
beta[i,j] <- x[2]
c=c+1
}
}
}
return(list(fert, mat_rate, juv_surv, adult_surv, alpha, beta))   ## Retourne le jeu de parametre avec de la correlation entre alpha ij et beta ij
}
S=5
param = parametrage(S)
ini <- init(S)
df_param_vital_rates <- data.frame("pi"=param[[1]], "gamma"=param[[2]], "phi"=param[[3]], "sa"=param[[4]])
write.csv(df_param_vital_rates, file = "param_vital_rates.csv", row.names = FALSE)
write.table(param[[5]], file="matrix_alpha.csv", row.names = FALSE, col.names = FALSE)
write.table(param[[6]], file="matrix_beta.csv", row.names = FALSE, col.names = FALSE)
write.csv(ini, file = "initialization.csv", row.names = FALSE)
source("simulation_algo.R")
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=5
x <- c()
for (k in 1:200){
liste_beta_permu <- sample(beta[which(lower.tri(beta) | upper.tri(beta))], length(beta[which(lower.tri(beta) | upper.tri(beta))]))  ## Recup tous les coef beta qui ne sont pas sur la diag et permute
liste_alpha_permu <- sample(alpha[which(lower.tri(alpha) | upper.tri(alpha))], length(alpha[which(lower.tri(alpha) | upper.tri(alpha))]))## Recup tous les coef beta qui ne sont pas sur la diag et permute
beta_permu <- beta
alpha_permu <- alpha
c=1
for (i in 1:S){
for (j in 1:S){
if (i!=j){
beta_permu[i,j] <- liste_beta_permu[c]
alpha_permu[i,j] <- liste_alpha_permu[c]
c=c+1
}
}
}
x = c(x,algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha_permu,beta_permu))  ## indice i de x -> result de la dynamique d'un jeu de param avec permutation
}
write.csv(x, file="results_simul_permut.csv", row.names = FALSE)
source("simulation_algo.R")
library("ggplot2")
invasion_score <- function(parameter){
pi01=parameter[1]
pi02=parameter[2]
gamma1=parameter[3]
gamma2=parameter[4]
phi1=parameter[5]
phi2=parameter[6]
s1a=parameter[7]
s2a=parameter[8]
alpha11=parameter[9]
alpha12=parameter[10]
alpha21=parameter[11]
alpha22=parameter[12]
beta11=parameter[13]
beta12=parameter[14]
beta21=parameter[15]
beta22=parameter[16]
scrit1j <- (1-s1a)/((1-gamma1)*(1-s1a)+pi01*gamma1)
scrit2j <- (1-s2a)/((1-gamma2)*(1-s2a)+pi02*gamma2)
f1<-(1/(gamma1*phi1))*(1-s1a)*(1-phi1+gamma1*phi1)
f2<-(1/(gamma2*phi2))*(1-s2a)*(1-phi2+gamma2*phi2)
Rs1<-phi1/scrit1j-1
Rs2<-phi2/scrit2j-1
Rf1<-(pi01/f1)-1
Rf2<-(pi02/f2)-1
Inv1<-(Rf1/Rf2)*(alpha22/alpha12)
Inv2<-(Rf2/Rf1)*(alpha11/alpha21)
Inv3<-(Rs1/Rs2)*(beta22/beta12)
Inv4<-(Rs2/Rs1)*(beta11/beta21)
return(list("Ralpha1"=Inv1,"Ralpha2"=Inv2,"Rbeta1"=Inv3,"Rbeta2"=Inv4))
}
ini <- read.csv("initialization.csv")
param <- read.csv("param_vital_rates.csv")
alpha <- as.matrix(read.table("matrix_alpha.csv", sep=" "))
beta <- as.matrix(read.table("matrix_beta.csv", sep=" "))
gen=3000
S=5
## Histogram of number of species at equilibrium in original case and permuted cases
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "cyan"
x <- read.csv("results_simul_permut.csv")[,1]
x<- c(x,x_ref)
hist(x, xlim=c(0,S),breaks=0:S, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species, high equalization"))
##
test_inv_score = c()
for (i in 1:S){
for (j in 1:S){
if (i != j){
inv_sc = invasion_score(c(param[i,1],param[j,1], param[i,2],param[j,2],param[i,3],param[j,3],param[i,4],param[j,4],alpha[i,i],alpha[j,i],alpha[i,j],alpha[j,j],beta[i,i],beta[j,i],beta[i,j],beta[j,j]))
if (inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){ # 1 = coexistence classique
test_inv_score <- c(test_inv_score, 1)
}else if(inv_sc[[1]]>1 & inv_sc[[2]]>1 & inv_sc[[3]]<1 & inv_sc[[4]]<1 | inv_sc[[1]]<1 & inv_sc[[2]]<1 & inv_sc[[3]]>1 & inv_sc[[4]]>1){
test_inv_score <- c(test_inv_score, 2) # priority effect
}else if(inv_sc[[1]]>1 & inv_sc[[2]]<1 & inv_sc[[3]]<1 & inv_sc[[4]]>1 | inv_sc[[1]]<1 & inv_sc[[2]]>1 & inv_sc[[3]]>1 & inv_sc[[4]]<1){
test_inv_score <- c(test_inv_score, 3) # coexistence opposite hierarchy
}else{
test_inv_score <- c(test_inv_score, 4) ## other cases
}
}
}
}
test_inv_score <- as.factor(test_inv_score)
ggplot(data.frame(test_inv_score), aes(x=test_inv_score)) +
geom_bar()+
xlab("1=Coexistence, 2=Priority effect, 3=Opposite exclusion, 4=Other case")+
labs(title="Outcomes suggested by invasion criteria of pairs of species")
##
traj_ref = algo_simul_traj(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
plot(1:gen, traj_ref[1,], type="l", ylim = c(0, max(traj_ref)))
for (s in 2:S){
lines(traj_ref[s,])
}
##
### TEST RANK
liste_beta <- beta[which(lower.tri(beta) | upper.tri(beta))]
liste_alpha <- alpha[which(lower.tri(alpha) | upper.tri(alpha))]
plot(liste_alpha, liste_beta)
plot(rank(liste_alpha), rank(liste_beta), xlab="Rank of alpha_ij", ylab="Rank of beta_ij")
##
simul_alpha_less <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],matrix(0, S, S),beta)
simul_beta_less <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,matrix(0, S, S))

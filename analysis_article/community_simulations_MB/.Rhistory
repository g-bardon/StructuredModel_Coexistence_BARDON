mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
S=40
x=c()
x_ref=c()
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta))
x <-c(x,simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta))
}
source("initialization_functions.R")
source("initialization_functions.R")
source("initialization_functions.R")
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
source("initialization_functions.R")
library("mvtnorm")
init <- function(S){
nj <- runif(S, min=10, max=50)
na <- runif(S, min=10, max=50)
return(cbind(nj,na))
}
parametrage <- function (S, mu_fert, sig_fert, ab, mu_alpha, sig_alpha, mu_beta, sig_beta, sig_inter, mu_inter){
fert = rlnorm(S, meanlog = mu_fert, sdlog=sig_fert)  ## log-normal distribution for fertility, low variance to avoid too large fertility
mat_rate = rbeta(S, ab,ab) ## beta distribution centered in 1/2
juv_surv = rbeta(S, ab,ab) ## beta distribution centered in 1/2
adult_surv = rbeta(S, ab,ab) ## beta distribution centered in 1/2
alpha_intra = rnorm(S, mu_alpha, sig_alpha)  # Normal distribution for competition coefficients
beta_intra = rnorm(S, mu_beta, sig_beta)
sig=sig_inter
alpha_beta_inter = rmvnorm(n=S*(S-1), mean=c(mu_inter,mu_inter), sigma=matrix(c(sig^2, -(sig^2)*0.9, -(sig^2)*0.9, sig^2), 2,2, byrow = TRUE))
alpha=matrix(0,S,S)   ## Matrix of alpha competition coefficients : i column corresponds to the alpha competition undergoes by species i
beta=matrix(0,S,S)  ## Matrix of beta competition coefficients : i column corresponds to the beta competition undergoes by species i
c=1
for (i in 1:S){
for (j in 1:S){
if (i==j){
alpha[i,j] <- alpha_intra[i]  ## intraspecific competition coefficients on the diagonal
beta[i,j] <- beta_intra[i]
}else{
x <- alpha_beta_inter[c,]
alpha[i,j] <- x[1] ## alpha and beta interspecific competition coefficient with negative correlation
beta[i,j] <- x[2]
c=c+1
}
}
}
return(list(fert, mat_rate, juv_surv, adult_surv, alpha, beta))   ## Return the parameter set with the negative correlation structure
}
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta))
x <-c(x,simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta))
}
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta))
x <-c(x,simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta))
}
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta))
x <-c(x,simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta))
}
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], param[[5]],param[[6]]))
}
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
}
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
View(param)
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
}
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
}
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
}
hist(x)
hist(x_ref)
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
source("initialization_functions.R")
source("simul_functions.R")
S=40
x=c()
x_ref=c()
gen=3000
for (i in 1:300){
param = parametrage(S, mu_fert[1], sig_fert[1], ab[1], mu_alpha[1], sig_alpha[1], mu_beta[1], sig_beta[1], sig_inter[1], mu_inter[1])
ini <- init(S)
x_ref <- c(x_ref, algo_simul(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]],param[[5]],param[[6]]))
x <-c(x,simul_permut(gen, S, ini, param[[1]] ,param[[2]],param[[3]],param[[4]], param[[5]],param[[6]]))
}
hist(x)
hist(x_ref)
source("initialization_functions.R")
mu_fert = c(3,3,3)
sig_fert=c(0.005,0.05,0.5)
ab= c(500,50,5)
mu_alpha=c(0.05,0.05,0.05)
sig_alpha=c(0.001,0.01,0.01)
mu_beta=c(0.05,0.05,0.05)
sig_beta=c(0.001,0.01,0.01)
sig_inter=c(0.02,0.02,0.02)
mu_inter=c(0.04,0.04,0.04)
var_list = c("low", "average", "high")
for (S in c(5,10,40)){
print(S)
for (i in 1:3){
param = parametrage(S, mu_fert[i], sig_fert[i], ab[i], mu_alpha[i], sig_alpha[i], mu_beta[i], sig_beta[i], sig_inter[i], mu_inter[i])
ini <- init(S)
folder = paste(as.character(S), var_list[i], sep="_")
dir.create(folder)
df_param_vital_rates <- data.frame("pi"=param[[1]], "gamma"=param[[2]], "phi"=param[[3]], "sa"=param[[4]])
write.csv(df_param_vital_rates, file = paste(folder,"/param_vital_rates.csv", sep=""), row.names = FALSE)
write.table(param[[5]], file=paste(folder, "/matrix_alpha.csv", sep=""), row.names = FALSE, col.names = FALSE)
write.table(param[[6]], file=paste(folder, "/matrix_beta.csv", sep=""), row.names = FALSE, col.names = FALSE)
write.csv(ini, file = paste(folder,"/initialization.csv", sep=""), row.names = FALSE)
}
}
library("ggplot2")
source("simul_functions.R")
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) #*60/100
sh <- strheight(text, cex=cex)#*60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
var_list<-c("low", "average", "high")
S_list <- c("5", "10", "40")
c3 <- LETTERS[1:9]
gen=3000
plot_list <- list()
z=1
par(mfrow=c(3,3))
for (i in var_list){
for (j in S_list){
S=as.numeric(j)
ini <- read.csv(paste(j,"_",i,"/initialization.csv", sep = ""))
param <- read.csv(paste(j,"_",i,"/param_vital_rates.csv", sep=""))
alpha <- as.matrix(read.table(paste(j,"_",i,"/matrix_alpha.csv", sep="")))
beta <- as.matrix(read.table(paste(j,"_",i,"/matrix_beta.csv", sep="")))
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "gray"
x <- simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta)
x<- c(x,x_ref)
hist(x, xlim=c(0,S+0.5),breaks=0:S+0.5, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species,",i,"variance"))
fig_label(c3[z], cex=2)
z=z+1
}
}
full_plot = recordPlot()
#plot.new()
cairo_pdf("9hist_opp_hier_only.pdf")
full_plot
dev.off()
cairo_ps("9hist_opp_hier_only.eps")
full_plot
dev.off()
library("ggplot2")
source("simul_functions.R")
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) #*60/100
sh <- strheight(text, cex=cex)#*60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
var_list<-c("low", "average", "high")
S_list <- c("5", "10", "40")
c3 <- LETTERS[1:9]
gen=3000
plot_list <- list()
z=1
par(mfrow=c(3,3))
for (i in var_list){
for (j in S_list){
S=as.numeric(j)
ini <- read.csv(paste(j,"_",i,"/initialization.csv", sep = ""))
param <- read.csv(paste(j,"_",i,"/param_vital_rates.csv", sep=""))
alpha <- as.matrix(read.table(paste(j,"_",i,"/matrix_alpha.csv", sep="")))
beta <- as.matrix(read.table(paste(j,"_",i,"/matrix_beta.csv", sep="")))
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "gray"
x <- simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta)
x<- c(x,x_ref)
hist(x, xlim=c(0,S+0.5),breaks=0:S+0.5, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species,",i,"variance"))
fig_label(c3[z], cex=2)
z=z+1
}
}
full_plot = recordPlot()
#plot.new()
cairo_pdf("9hist_opp_hier_only.pdf")
full_plot
dev.off()
cairo_ps("9hist_opp_hier_only.eps")
full_plot
dev.off()
library("ggplot2")
source("simul_functions.R")
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) #*60/100
sh <- strheight(text, cex=cex)#*60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
var_list<-c("low", "average", "high")
S_list <- c("5", "10", "40")
c3 <- LETTERS[1:9]
gen=3000
plot_list <- list()
z=1
par(mfrow=c(3,3))
for (i in var_list){
for (j in S_list){
S=as.numeric(j)
ini <- read.csv(paste(j,"_",i,"/initialization.csv", sep = ""))
param <- read.csv(paste(j,"_",i,"/param_vital_rates.csv", sep=""))
alpha <- as.matrix(read.table(paste(j,"_",i,"/matrix_alpha.csv", sep="")))
beta <- as.matrix(read.table(paste(j,"_",i,"/matrix_beta.csv", sep="")))
x_ref <- algo_simul(gen, S, ini, param[,1],param[,2],param[,3],param[,4],alpha,beta)
color= rep("white", S)
color[x_ref] = "gray"
x <- simul_permut(gen, S, ini, param[,1] ,param[,2],param[,3],param[,4], alpha, beta)
x<- c(x,x_ref)
hist(x, xlim=c(0,S+0.5),breaks=0:S+0.5, col=color, xlab = "Number of species at equilibrium", main = paste(S, "species,",i,"variance"))
fig_label(c3[z], cex=2)
z=z+1
}
}
full_plot = recordPlot()
#plot.new()
